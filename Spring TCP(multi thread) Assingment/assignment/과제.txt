1. Socket & 멀티쓰레드 프로그래밍

다중 Client로 부터 TCP 방식으로 데이터를 수집. ◈
 각 Client로 부터 수집한 데이터는 하나의 Queue에 넣어 저장.◈
 별도 분석 Thread를 만들어, 1분 단위로 저장된 데이터를 읽어 분석.
 분석된 결과는 DB에 저장.
각 Client는 30초 동안 데이터 전송 후 접속 종료.
 접속 후 5~10초 대기 후, 다시 접속해서 위의 작업 반복 수행.
( 접속 -> 30초 데이터 전송 -> 접속 종료 후 5~10초 대기 -> 접속 -> 30초 데이터 전송 -> ..... )

2. Server side

- 개발 언어 : java (spring boot)
  - TCP로 다중 Client로부터 데이터 수신.
  - 각 Client에 대한 데이터 수신은 Thread를 할당 받아 처리.
  - Thread pool을 이용하고, Thread는 최대 10개 까지만 생성. (동시 접속은 10개)
  - Thread pool은 ThreadPoolExecutor class 이용◈
  - 수집된 데이터는 별도 queue에 넣어 저장. (멀티쓰레드 환경에서의 공유 자원 관리 중요)
  - 데이터 분석을 위한 별도 쓰레드 생성해서, 1분 단위로 Queue에 쌓인 모든 데이터 처리.
  - 분석 결과는 1분 단위로 평균, 최대, 최소 값 및 최대를 발생시킨 Serial 정보.
  - 결과는 DB에 별도 Table을 만들어 저장
  -  Client 접속 및 접속 해제 log 반드시 기록. (시간, Serial, Socket ID 기록.)
- TCP 데이터 포멧
 {
       char serial[10];    // Serial (8자리)
       long time;        // epoch time
       double value;    // data
   }
3. Client side

- 개발 언어 : python 또는 java
  - 최초 Client 실행 시, 임의의 8자리 시리얼을 갖도록 구현 (ex. GUID 생성 후, 앞 8자리 사용)
  - 시리얼 생성 후, TCP로 서버에 접속.
  - 1초 단위로 random 숫자 만들어 전송. (랜덤 범위: 1 ~ 100)
  - 전송 데이터는 위의 TCP 데이터 포멧으로 전송.
  - TCP 접속 후, 30초 동안 데이터 전송. 30초 후에는 TCP 접속 해제.
  - 접속 해제 후, 5 ~ 10 초 Random 대기 후, 다시 접속해서 위의 작업 반복 수행.
이번 과제 핵심 keyword :
- TCP Socket
- 멀티 쓰레드
- 공유 자원 관리





- 멀티쓰레드 란?
- 식사하는 철학자 문제
- 교착 상태 (deadlock)에 대한 이해 및 피하는 방법
- Thread Pool이란? Thread pool을 사용하는 이유?